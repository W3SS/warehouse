// Generated by CoffeeScript 1.3.3
(function() {

  this.run_tests_rql = function(store, name) {
    var alice1, alice2, asyncTest, james, jane, john, people, q, ql, setup_data, toObj;
    name = typeof name === 'undefined' ? store.constructor.name : name;
    john = {
      _id: 1,
      firstname: 'John',
      lastname: 'Silver',
      age: 30
    };
    james = {
      _id: 2,
      firstname: 'James',
      lastname: 'Wood',
      age: 42
    };
    jane = {
      _id: 3,
      firstname: 'Jane',
      lastname: 'White',
      age: 28
    };
    alice1 = {
      _id: 4,
      firstname: 'Alice',
      lastname: 'Summer',
      age: 30
    };
    alice2 = {
      _id: 5,
      firstname: 'Alice',
      lastname: 'Spring',
      age: 28
    };
    people = [john, james, jane, alice1, alice2];
    toObj = function(arr) {
      var i, ret, _i, _len;
      ret = {};
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        i = arr[_i];
        ret[i] = null;
      }
      return ret;
    };
    q = function(str, expected, fn) {
      return store.query(str).then(function(result) {
        if (typeof fn === 'function') {
          result = fn(result);
        }
        deepEqual(result, expected, str);
        return start();
      }).fail(function(msg) {
        ok(false, msg);
        return start();
      });
    };
    ql = function(str, expected, fn) {
      return store.query(str).then(function(result) {
        if (typeof fn === 'function') {
          result = fn(result);
        }
        equal(result.length, expected, str);
        return start();
      }).fail(function(msg) {
        ok(false, msg);
        return start();
      });
    };
    setup_data = function() {
      var add;
      stop();
      add = function(i) {
        if (i >= people.length) {
          start();
          return;
        }
        return store.add(people[i]).then(function() {
          return add(i + 1);
        });
      };
      return store.clear().then(function() {
        return add(0);
      });
    };
    asyncTest = function(testName, expected, callback) {
      if (arguments.length === 2) {
        callback = expected;
        expected = null;
      }
      return QUnit.test(testName, expected, function() {
        QUnit.stop(expected || 0);
        return callback();
      });
    };
    QUnit.moduleStart(typeof setup !== 'undefined' ? (function() {
      QUnit.stop();
      return setup().then(function() {
        setup_data();
        return QUnit.start();
      });
    }) : setup_data);
    if (typeof qinit !== 'undefined') {
      qinit(QUnit);
    }
    QUnit.module("" + name + ": RQL");
    asyncTest('select', 2, function() {
      q('select(firstname)', toObj(people.map(function(x) {
        return {
          firstname: x.firstname
        };
      })), toObj);
      return q('select(firstname,age)', toObj(people.map(function(x) {
        return {
          firstname: x.firstname,
          age: x.age
        };
      })), toObj);
    });
    asyncTest('distinct', 2, function() {
      ql('select(age)&distinct()', 3);
      return q('select(age)&distinct()&sort(+age)', [28, 30, 42].map(function(x) {
        return {
          age: x
        };
      }));
    });
    asyncTest('limit', 2, function() {
      q('limit(2)&sort(+_id)', [john, james]);
      return q('limit(2,1)&sort(+_id)', [james, jane]);
    });
    asyncTest('sort', 7, function() {
      q('sort(firstname)', [james, jane, john], function(x) {
        return x.slice(2);
      });
      q('sort(+firstname)', [james, jane, john], function(x) {
        return x.slice(2);
      });
      q('sort(-firstname)', [john, jane, james], function(x) {
        return x.slice(0, 3);
      });
      q('sort(+firstname,+age)', [alice2, alice1, james, jane, john]);
      q('sort(+firstname,-age)', [alice1, alice2, james, jane, john]);
      q('sort(-firstname,+age)', [john, jane, james, alice2, alice1]);
      return q('sort(-firstname,-age)', [john, jane, james, alice1, alice2]);
    });
    asyncTest('eq', 6, function() {
      q('firstname=Jane', [jane]);
      q('firstname=eq=Jane', [jane]);
      q('eq(firstname,Jane)', [jane]);
      q('age=42', [james]);
      q('age=eq=42', [james]);
      return q('eq(age,42)', [james]);
    });
    asyncTest('ne', 8, function() {
      ql('firstname!=Jane', 4);
      ql('firstname=ne=Jane', 4);
      ql('ne(firstname,Jane)', 4);
      q('ne(firstname,Jane)&sort(+_id)', [john, james, alice1, alice2]);
      ql('age!=42', 4);
      ql('age=ne=42', 4);
      ql('ne(age,42)', 4);
      return q('ne(age,42)&sort(+_id)', [john, jane, alice1, alice2]);
    });
    asyncTest('lt', 4, function() {
      ql('age<30', 2);
      ql('age=lt=30', 2);
      ql('lt(age,30)', 2);
      return q('lt(age,30)&sort(+_id)', [jane, alice2]);
    });
    asyncTest('le', 4, function() {
      ql('age<=30', 4);
      ql('age=le=30', 4);
      ql('le(age,30)', 4);
      return q('le(age,30)&sort(+_id)', [john, jane, alice1, alice2]);
    });
    asyncTest('gt', 4, function() {
      ql('age>30', 1);
      ql('age=gt=30', 1);
      ql('gt(age,30)', 1);
      return q('gt(age,30)&sort(+_id)', [james]);
    });
    asyncTest('ge', 4, function() {
      ql('age>=30', 3);
      ql('age=ge=30', 3);
      ql('ge(age,30)', 3);
      return q('ge(age,30)&sort(+_id)', [john, james, alice1]);
    });
    asyncTest('in', 4, function() {
      q('in(firstname,(John))', [john]);
      ql('in(firstname,(Alice,James))', 3);
      q('in(age,(42))', [james]);
      return ql('in(age,(28,42))', 3);
    });
    asyncTest('out', 4, function() {
      ql('out(firstname,(John))', 4);
      ql('out(firstname,(Alice,James))', 2);
      ql('out(age,(42))', 4);
      return q('out(age,(30,28))', [james]);
    });
    asyncTest('and', 2, function() {
      ql('age>28&age!=42', 2);
      return ql('age>28,age!=42', 2);
    });
    asyncTest('or', 2, function() {
      ql('(age>30|age=28)', 3);
      return ql('or(age>30,age=28)', 3);
    });
    asyncTest('or nested in and', 3, function() {
      ql('and(or(age=28,age=30),or(firstname=Alice,firstname=John))', 3);
      ql('or(age=28,age=30)&or(firstname=Alice,firstname=John)', 3);
      return ql('(age=28|age=30)&(firstname=Alice|firstname=John)', 3);
    });
    return asyncTest('and nested in or', 3, function() {
      ql('or(and(age=28,firstname=Alice),and(age=30,firstname=John))', 2);
      ql('(and(age=28,firstname=Alice)|and(age=30,firstname=John))', 2);
      return ql('((age=28&firstname=Alice)|(age=30&firstname=John))', 2);
    });
  };

  if (typeof require !== 'undefined') {
    this.run_tests_rql(store, typeof name === 'undefined' ? void 0 : name);
  }

}).call(this);
