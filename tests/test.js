// Generated by CoffeeScript 1.6.3
(function() {
  this.run_tests = function(store, name) {
    var checkFail, config_autorun, config_autostart, config_reorder, deq, eq, james, jane, john;
    name = typeof name === 'undefined' ? store.constructor.name : name;
    if (typeof qinit !== 'undefined') {
      qinit(QUnit);
    }
    eq = strictEqual;
    deq = deepEqual;
    john = {
      firstname: 'John',
      lastname: 'Silver',
      age: 30
    };
    john[store.keyPath] = 1;
    james = {
      firstname: 'James',
      lastname: 'Wood',
      age: 42
    };
    james[store.keyPath] = 2;
    jane = {
      firstname: 'Jane',
      lastname: 'White',
      age: 28
    };
    jane[store.keyPath] = 3;
    config_reorder = QUnit.config.reorder;
    config_autostart = QUnit.config.autostart;
    config_autorun = QUnit.config.autorun;
    QUnit.config.reorder = false;
    QUnit.config.autostart = false;
    QUnit.config.autorun = false;
    checkFail = function(promise) {
      return promise.fail(function(err) {
        ok(false, 'fail');
        eq(err, '', 'error message');
        return start();
      });
    };
    QUnit.moduleStart(typeof setup !== 'undefined' ? (function() {
      QUnit.stop();
      return setup().then(function() {
        return QUnit.start();
      });
    }) : function() {});
    QUnit.module("" + name + ": CRUD");
    asyncTest('clear', function() {
      return checkFail(store.clear().then(function() {
        ok(true);
        return start();
      }));
    });
    asyncTest('is empty', function() {
      return checkFail(store.query().then(function(res) {
        eq(res.length, 0, 'store is empty');
        return start();
      }));
    });
    asyncTest('add item', function() {
      return checkFail(store.add(john).then(function(res) {
        deq(res, john);
        return start();
      }));
    });
    asyncTest('get item', function() {
      return checkFail(store.get(1).then(function(res) {
        deepEqual(res, john);
        return start();
      }));
    });
    asyncTest('get item type coerce', function() {
      return checkFail(store.get('1').then(function(res) {
        deepEqual(res, john);
        return start();
      }));
    });
    asyncTest('add item', function() {
      return checkFail(store.add(james).then(function(res) {
        deq(res, james);
        return start();
      }));
    });
    asyncTest('update item', function() {
      john.age = 35;
      return checkFail(store.put(john, john._id).then(function(res) {
        deq(res, john);
        return start();
      }));
    });
    asyncTest('get item', function() {
      return checkFail(store.get(1).then(function(res) {
        deepEqual(res, john);
        return start();
      }));
    });
    asyncTest('add item', function() {
      return checkFail(store.add(jane).then(function(res) {
        deq(res, jane);
        return start();
      }));
    });
    asyncTest('find by id', function() {
      return checkFail(store.query('_id=2').then(function(res) {
        deq(res, [james]);
        return start();
      }));
    });
    asyncTest('delete', function() {
      return checkFail(store["delete"](2).then(function(res) {
        deq(res, 1);
        return start();
      }));
    });
    asyncTest('check deleted', function() {
      return checkFail(store.query().then(function(res) {
        deq(res.length, 2);
        return start();
      }));
    });
    asyncTest('delete non-existing item', function() {
      return checkFail(store["delete"](10).then(function(res) {
        deq(res, 0);
        return start();
      }));
    });
    QUnit.module("" + name + ": Querying");
    asyncTest('find by name', function() {
      return checkFail(store.query('firstname=John').then(function(res) {
        deq(res, [john]);
        return start();
      }));
    });
    asyncTest('sorting', function() {
      return checkFail(store.query('sort(+age)').then(function(res) {
        deq(res, [jane, john]);
        return start();
      }));
    });
    if (typeof require !== 'undefined') {
      QUnit.start();
    }
    QUnit.config.reorder = config_reorder;
    QUnit.config.autostart = config_autostart;
    return QUnit.config.autorun = config_autorun;
  };

  if (typeof require !== 'undefined') {
    this.run_tests(store, typeof name === 'undefined' ? void 0 : name);
  }

}).call(this);
